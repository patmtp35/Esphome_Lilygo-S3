#########################################################
#  Display Victron S3 Simple Page
###############################
# V2.0
###################################
#changelog:
#  V 2.0 Simple page values viewer
#  V1.0 Test
###################################
substitutions:
  #############################
  # comomon substitution #####
  ############################  
  name: "victrondisplay"
  esphome_name: "TTgoS3-Victron Display"
  # nonm affiché dans l'interface #
  friendly_name: "Lilygo-S3 Display Victron"
  #######################################
  external_components_source: github://landonr/lilygo-tdisplays3-esphome
  ext_components: "tdisplays3"
  sensor_prefix: ""
  device_description: "Display Victron Mppt Virtals Meters Lilygo S3"
  projectname: "Pat.TTgo-S3 Display Victron Mppt"
  appversion: 1.0.0
  log_level: "INFO"
  baud_ratelog: "0"
  api_encryption_key: !secret ttgos3key
  ota_pswd: !secret ota_pswd
  ap_pwd: !secret ota_pswd
  adress_ip: !secret ip_ttgos3
  gateway_ip: !secret ip_gateway
  dns_ip: !secret ip_dns
  time_platform: "homeassistant"
  time_timezone: "Europe/Paris"
  time_id: "ha_time" 

###############################
### definition de la carte ESP
###############################  

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  comment: ${device_description}
  project:
    name: ${projectname}
    version: ${appversion}
  # On boot set the backlight to 60%
  #on_boot:
  #  then:
  #    - script.execute: backlight_timeout
  on_boot:
    then:
      - light.turn_on:
          id: backlight1
          brightness: 60%

external_components:
  - source: ${external_components_source}
    components: ${ext_components}

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  framework:
    type: arduino
###################################
### inclusion de la partie commune 
###################################

<<: !include .common.yaml
<<: !include .basedisplay.yaml
  
# Enable logging
logger: 
  level: DEBUG
  # Quieten the warnings about delays
  logs:
    tdisplays3.display: ERROR
    component: ERROR

# Global variable set that could be used in the display, but is not actively in use
globals:
  - id: global_text
    restore_value: no
    type: std::string
    initial_value: '"-- Awaiting Data --"'
     
api:
  # Home Assistant service that can set the global variable
  services:
    - service: set_text
      variables:
        text_display: string
      then:
        - globals.set:
            id: global_text
            value: !lambda 'return text_display;'    
            
##############################################################
# Interface web gestion luminosiée    
# Buttons
binary_sensor:
  - platform: gpio
    name: "Short press button 0"
    id: short_press_button_0
    pin:
      number: GPIO0
      inverted: True
      mode:
        input: True
        pullup: True
    on_click: 
      then:
        - switch.toggle: backlight
      min_length: 5ms
  - platform: gpio
    name: "Short press button 1"
    id: short_press_button_1
    pin:
      number: GPIO35
      inverted: True
      mode:
        input: True
    on_click: 
      then:
        - switch.toggle: backlight
      min_length: 5ms

# Backlight
script:
  - id: backlight_timeout
    mode: restart
    then:
      - delay: 10min
      - switch.turn_off: backlight

switch:
  - platform: gpio
    pin: GPIO4
    id: backlight
    internal: true
    restore_mode: ALWAYS_ON
    on_turn_on:
      - script.execute: backlight_timeout
      
# Set pin for backlight
output:
  - platform: ledc
    pin: GPIO38
    id: ledc_pmw

# Set backlight controller
light:
  - platform: monochromatic
    output: ledc_pmw
    name: "Backlight"
    id: backlight1
    restore_mode: ALWAYS_OFF
##########################################################
text_sensor:
  - platform: wifi_info
    ip_address:
      name: ${name} IP Address
      id: host_ip
      entity_category: diagnostic
      icon: mdi:router-wireless
      
  - platform: homeassistant
    id: chargemode
    name: "Charge :"
    entity_id: sensor.smartsolar1_esp_charging_mode
    internal: true  
    icon: "mdi:solar-power"
#########################################################     
sensor:
  - platform: homeassistant  
    id: bat_temp
    entity_id: sensor.bms24v_temperature
    internal: true
  
  - platform: homeassistant
    id: batvoltage
    entity_id: sensor.smartsolar1_esp_battery_voltage
    internal: true

  - platform: homeassistant
    id: panelwatts
    entity_id: sensor.smartsolar1_esp_panel_power
    internal: true 

  - platform: homeassistant
    id: panelvolts
    entity_id: sensor.smartsolar1_esp_panel_voltage
    internal: true 
  
  - platform: homeassistant
    id: panelamps
    entity_id: sensor.smartsolar1_esp_panel_current
    internal: true
 
# Background image
image:
  - file: "img/sky.jpg"
    id: background_image
    type: RGB24

# 320 x 170 pixel display
display:
  - platform: tdisplays3
    id: lcd
    update_interval: 0.25s
    rotation: 270
    pages:
      - id: page1
        lambda: |-
          //Base colours
          auto White = Color(255, 255, 255);
          // Write background image
          //it.image(0, 0, id(background_image));
          // Write clock
          it.printf(160, 60, id(big_boldfont), White, TextAlign::CENTER, id(ha_time).now().strftime("%H:%M:%S").c_str());
          // cadre
          it.rectangle(0, 0, it.get_width(), it.get_height(), id(my_white));
          it.rectangle(0, 32, it.get_width(), it.get_height(), id(my_white)); // header bar
          // lines delim
          it.line(0, 90, 320, 90, White);
          it.line(0, 128, 320, 128, White);
          // upbar titre
          it.printf(160, 18, id(up_barfont), White, TextAlign::CENTER, "MPPT 1");
          // temps bat
          it.printf(50, 18, id(small_boldfont), my_green, TextAlign::CENTER, "%.1f °c", id(bat_temp).state);
          //Write bat voltage
          it.printf(280, 18, id(small_boldfont), my_green, TextAlign::CENTER, "%.1f v", id(batvoltage).state);
          //Write Solar Panel Watts
          it.printf(60, 145, id(med_boldfont), White, TextAlign::CENTER, "%.0fw", id(panelwatts).state);
          //Write Solar Panel Volts
          it.printf(160, 145, id(med_boldfont), White, TextAlign::CENTER, "%.1fv", id(panelvolts).state);
          //Write Solar Panel Amps
          it.printf(265, 145, id(med_boldfont), White, TextAlign::CENTER, "%.2fa", id(panelamps).state);
          //Write Solar charging mode
          it.printf(160, 105, id(med_boldfont), my_green, TextAlign::CENTER, "Charge: %s", id(chargemode).state.c_str());
          